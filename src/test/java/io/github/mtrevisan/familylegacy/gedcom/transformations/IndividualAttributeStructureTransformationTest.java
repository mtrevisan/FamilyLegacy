package io.github.mtrevisan.familylegacy.gedcom.transformations;

import io.github.mtrevisan.familylegacy.gedcom.GedcomNode;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import static io.github.mtrevisan.familylegacy.gedcom.transformations.TransformationHelper.extractSubStructure;


class IndividualAttributeStructureTransformationTest{

	@Test
	void to(){
		final GedcomNode root = GedcomNode.createEmpty()
			.addChild(GedcomNode.create("PARENT")
				.addChild(GedcomNode.create("CAST")
					.withValue("CASTE_NAME")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("DSCR")
					.withValue("PHYSICAL_DESCRIPTION")
					.addChild(GedcomNode.create("CONC")
						.withValue("PHYSICAL_DESCRIPTION"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("EDUC")
					.withValue("SCHOLASTIC_ACHIEVEMENT")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("IDNO")
					.withValue("NATIONAL_ID_NUMBER")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("NATI")
					.withValue("NATIONAL_OR_TRIBAL_ORIGIN")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("NCHI")
					.withValue("COUNT_OF_CHILDREN")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("NMR")
					.withValue("COUNT_OF_MARRIAGES")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("OCCU")
					.withValue("OCCUPATION")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("PROP")
					.withValue("POSSESSIONS")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("RELI")
					.withValue("RELIGIOUS_AFFILIATION")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("RESI")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("SSN")
					.withValue("SOCIAL_SECURITY_NUMBER")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("TITL")
					.withValue("NOBILITY_TYPE_TITLE")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("FACT")
					.withValue("ATTRIBUTE_DESCRIPTOR")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
			);

		Assertions.assertEquals("children: [{tag: PARENT, children: [{tag: CAST, value: CASTE_NAME, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: DSCR, value: PHYSICAL_DESCRIPTION, children: [{tag: CONC, value: PHYSICAL_DESCRIPTION}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: EDUC, value: SCHOLASTIC_ACHIEVEMENT, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: IDNO, value: NATIONAL_ID_NUMBER, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: NATI, value: NATIONAL_OR_TRIBAL_ORIGIN, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: NCHI, value: COUNT_OF_CHILDREN, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: NMR, value: COUNT_OF_MARRIAGES, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: OCCU, value: OCCUPATION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: PROP, value: POSSESSIONS, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: RELI, value: RELIGIOUS_AFFILIATION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: RESI, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: SSN, value: SOCIAL_SECURITY_NUMBER, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: TITL, value: NOBILITY_TYPE_TITLE, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: FACT, value: ATTRIBUTE_DESCRIPTOR, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}]}]", root.toString());

		final Transformation t = new IndividualAttributeStructureTransformation();
		t.to(extractSubStructure(root, "PARENT"), root);

		Assertions.assertEquals("children: [{tag: PARENT, children: [{tag: ATTRIBUTE, value: CASTE, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: CASTE_NAME}]}, {tag: ATTRIBUTE, value: PHYSICAL_DESCRIPTION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: PHYSICAL_DESCRIPTIONPHYSICAL_DESCRIPTION}]}, {tag: ATTRIBUTE, value: EDUCATION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: SCHOLASTIC_ACHIEVEMENT}]}, {tag: ATTRIBUTE, value: _IDNO, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: NATIONAL_ID_NUMBER}]}, {tag: ATTRIBUTE, value: ORIGIN, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: NATIONAL_OR_TRIBAL_ORIGIN}]}, {tag: ATTRIBUTE, value: CHILDREN_COUNT, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: COUNT_OF_CHILDREN}]}, {tag: ATTRIBUTE, value: MARRIAGES_COUNT, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: COUNT_OF_MARRIAGES}]}, {tag: ATTRIBUTE, value: OCCUPATION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: OCCUPATION}]}, {tag: ATTRIBUTE, value: POSSESSION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: POSSESSIONS}]}, {tag: ATTRIBUTE, value: RELIGION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: RELIGIOUS_AFFILIATION}]}, {tag: ATTRIBUTE, value: RESIDENCE, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE}]}, {tag: ATTRIBUTE, value: SSN, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: SOCIAL_SECURITY_NUMBER}]}, {tag: ATTRIBUTE, value: TITLE, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: NOBILITY_TYPE_TITLE}]}, {tag: ATTRIBUTE, value: FACT, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}, {tag: VALUE, value: ATTRIBUTE_DESCRIPTOR}]}]}]", root.toString());
	}

	@Test
	void from(){
		final GedcomNode root = GedcomNode.createEmpty()
			.addChild(GedcomNode.create("PARENT")
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("CASTE")
					.addChild(GedcomNode.create("VALUE")
						.withValue("CASTE_NAME"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("PHYSICAL_DESCRIPTION")
					.addChild(GedcomNode.create("VALUE")
						.withValue("PHYSICAL_DESCRIPTION_UNSTRUCTURED"))
					.addChild(GedcomNode.create("KEY")
						.withValue("EYES")
							.addChild(GedcomNode.create("VALUE")
								.withValue("BLUE")))
					.addChild(GedcomNode.create("KEY")
						.withValue("HEIGHT")
						.addChild(GedcomNode.create("VALUE")
							.withValue("1.77 m")))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("EDUCATION")
					.addChild(GedcomNode.create("VALUE")
						.withValue("SCHOLASTIC_ACHIEVEMENT"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("ORIGIN")
					.addChild(GedcomNode.create("VALUE")
						.withValue("NATIONAL_OR_TRIBAL_ORIGIN"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("CHILDREN_COUNT")
					.addChild(GedcomNode.create("VALUE")
						.withValue("CASTE_NAME"))
					.addChild(GedcomNode.create("CERTAINTY")
						.withValue("CERTAINTY"))
					.addChild(GedcomNode.create("CREDIBILITY")
						.withValue("CREDIBILITY_ASSESSMENT"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("MARRIAGES_COUNT")
					.addChild(GedcomNode.create("VALUE")
						.withValue("CASTE_NAME"))
					.addChild(GedcomNode.create("CERTAINTY")
						.withValue("CERTAINTY"))
					.addChild(GedcomNode.create("CREDIBILITY")
						.withValue("CREDIBILITY_ASSESSMENT"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("OCCUPATION")
					.addChild(GedcomNode.create("VALUE")
						.withValue("OCCUPATION"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("POSSESSION")
					.addChild(GedcomNode.create("VALUE")
						.withValue("POSSESSION"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("RELIGION")
					.addChild(GedcomNode.create("VALUE")
						.withValue("RELIGIOUS_AFFILIATION"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("RESIDENCE")
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("SSN")
					.addChild(GedcomNode.create("VALUE")
						.withValue("SOCIAL_SECURITY_NUMBER"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("TITLE")
					.addChild(GedcomNode.create("VALUE")
						.withValue("NOBILITY_TYPE_TITLE"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.withValue("ATTRIBUTE_DESCRIPTOR")
					.addChild(GedcomNode.create("VALUE")
						.withValue("ATTRIBUTE_DESCRIPTOR"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
				.addChild(GedcomNode.create("ATTRIBUTE")
					.addChild(GedcomNode.create("VALUE")
						.withValue("ATTRIBUTE_DESCRIPTOR"))
					.addChild(GedcomNode.create("TYPE")
						.withValue("EVENT_OR_FACT_CLASSIFICATION")))
			);

		Assertions.assertEquals("children: [{tag: PARENT, children: [{tag: ATTRIBUTE, value: CASTE, children: [{tag: VALUE, value: CASTE_NAME}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: PHYSICAL_DESCRIPTION, children: [{tag: VALUE, value: PHYSICAL_DESCRIPTION_UNSTRUCTURED}, {tag: KEY, value: EYES, children: [{tag: VALUE, value: BLUE}]}, {tag: KEY, value: HEIGHT, children: [{tag: VALUE, value: 1.77 m}]}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: EDUCATION, children: [{tag: VALUE, value: SCHOLASTIC_ACHIEVEMENT}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: ORIGIN, children: [{tag: VALUE, value: NATIONAL_OR_TRIBAL_ORIGIN}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: CHILDREN_COUNT, children: [{tag: VALUE, value: CASTE_NAME}, {tag: CERTAINTY, value: CERTAINTY}, {tag: CREDIBILITY, value: CREDIBILITY_ASSESSMENT}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: MARRIAGES_COUNT, children: [{tag: VALUE, value: CASTE_NAME}, {tag: CERTAINTY, value: CERTAINTY}, {tag: CREDIBILITY, value: CREDIBILITY_ASSESSMENT}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: OCCUPATION, children: [{tag: VALUE, value: OCCUPATION}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: POSSESSION, children: [{tag: VALUE, value: POSSESSION}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: RELIGION, children: [{tag: VALUE, value: RELIGIOUS_AFFILIATION}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: RESIDENCE, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: SSN, children: [{tag: VALUE, value: SOCIAL_SECURITY_NUMBER}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: TITLE, children: [{tag: VALUE, value: NOBILITY_TYPE_TITLE}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, value: ATTRIBUTE_DESCRIPTOR, children: [{tag: VALUE, value: ATTRIBUTE_DESCRIPTOR}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: ATTRIBUTE, children: [{tag: VALUE, value: ATTRIBUTE_DESCRIPTOR}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}]}]", root.toString());

		final Transformation t = new IndividualAttributeStructureTransformation();
		t.from(extractSubStructure(root, "PARENT"), root);

		Assertions.assertEquals("children: [{tag: PARENT, children: [{tag: CAST, value: CASTE_NAME, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: DSCR, value: PHYSICAL_DESCRIPTION_UNSTRUCTURED, EYES BLUE, HEIGHT 1.77 m, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: EDUC, value: SCHOLASTIC_ACHIEVEMENT, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: NATI, value: NATIONAL_OR_TRIBAL_ORIGIN, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: NCHI, value: CASTE_NAME, children: [{tag: _QUAY, value: CERTAINTY}, {tag: _CREDIBILITY, value: CREDIBILITY_ASSESSMENT}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: NMR, value: CASTE_NAME, children: [{tag: _QUAY, value: CERTAINTY}, {tag: _CREDIBILITY, value: CREDIBILITY_ASSESSMENT}, {tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: OCCU, value: OCCUPATION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: PROP, value: POSSESSION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: RELI, value: RELIGIOUS_AFFILIATION, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: RESI, value: RESIDENCE, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: SSN, value: SOCIAL_SECURITY_NUMBER, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: TITL, value: NOBILITY_TYPE_TITLE, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: FACT, value: ATTRIBUTE_DESCRIPTOR - ATTRIBUTE_DESCRIPTOR, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}, {tag: FACT, value: ATTRIBUTE_DESCRIPTOR, children: [{tag: TYPE, value: EVENT_OR_FACT_CLASSIFICATION}]}]}]", root.toString());
	}

}