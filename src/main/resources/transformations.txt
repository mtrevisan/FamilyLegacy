direct:
for-each FAM id create FAMILY
	FAMILY.id = FAM.id
	FAMILY.SPOUSE1.xref = FAM.HUSB.xref
	FAMILY.SPOUSE2.xref = FAM.WIFE.xref
	for-each FAM.CHIL create CHILD
		CHILD.xref = FAM.CHIL.xref
	transfer FAM[EVEN] to FAMILY[EVENT]
	create EVENT{CHILDREN_COUNT}
		EVENT{CHILDREN_COUNT}.DESCRIPTION.value = FAM.NCHI.value
	transfer FAM.NOTE to FAMILY.NOTE
	transfer SOUR,OBJE xref to SOURCE
	FAMILY.RESTRICTION.value = FAM.RESN.value


reverse:
for-each FAMILY id create FAM
	FAM.id = FAMILY.id
	FAM.HUSB.xref = FAMILY.SPOUSE1.xref
	FAM.WIFE.xref = FAMILY.SPOUSE2.xref
	for-each CHILD create FAM.CHIL
		FAM.CHIL.xref = CHILD.xref
	transfer FAMILY[EVENT] to FAM[EVEN]
	FAM.NCHI.value = EVENT{CHILDREN_COUNT}.DESCRIPTION.value
	transfer FAMILY.NOTE to FAM.NOTE
	transfer SOURCE xref to SOUR,OBJE
	FAM.RESN.value = FAMILY.RESTRICTION.value




TODO:
INDIVIDUAL_RECORD :=
n @<XREF:INDI>@ INDI    {1:1}	/* An xref ID of an individual record. */
  +1 RESN <RESTRICTION_NOTICE>    {0:1}	/* The restriction notice is defined for Ancestral File usage. Ancestral File download GEDCOM files may contain this data. */
  +1 <<PERSONAL_NAME_STRUCTURE>>    {0:M}	/* A list of PERSONAL_NAME_STRUCTURE() objects giving the names associated with this individual. */
  +1 SEX <SEX_VALUE>    {0:1}	/* A code that indicates the sex of the individual (one of 'M', 'F', 'U'). */
  +1 <<INDIVIDUAL_EVENT_STRUCTURE>>    {0:M}	/* A list of INDIVIDUAL_EVENT_STRUCTURE() objects giving the events associated with this individual. */
  +1 <<INDIVIDUAL_ATTRIBUTE_STRUCTURE>>    {0:M}	/* A list of INDIVIDUAL_ATTRIBUTE_STRUCTURE() objects giving the attributes associated with this individual. */
  +1 <<CHILD_TO_FAMILY_LINK>>    {0:M}	/* A list of CHILD_TO_FAMILY_LINK() objects giving the details of families this individual is a child of. */
  +1 <<SPOUSE_TO_FAMILY_LINK>>    {0:M}	/* A list of SPOUSE_TO_FAMILY_LINK() objects giving the details of families this individual is a spouse of. */
  +1 SUBM @<XREF:SUBM>@    {0:M}	/* A vector of xref IDs of submitters of this record. */
  +1 <<ASSOCIATION_STRUCTURE>>    {0:M}	/* A list of ASSOCIATION_STRUCTURE() objects giving the details of individuals this individual is associated with. */
  +1 ALIA @<XREF:INDI>@    {0:M}	/* A vector of xref IDs of individual aliases of this individual. */
  +1 ANCI @<XREF:SUBM>@    {0:M}	/* A vector of xref IDs of submitters with an interest in ancestors of this individual. */
  +1 DESI @<XREF:SUBM>@    {0:M}	/* A vector of xref IDs of submitters with an interest in descendants of this individual. */
  +1 RFN <PERMANENT_RECORD_FILE_NUMBER>    {0:1}	/* The record number that uniquely identifies this record within a registered network resource. */
  +1 AFN <ANCESTRAL_FILE_NUMBER>    {0:1}	/* A unique permanent record number of an individual record contained in the Family History Department's Ancestral File. */
  +1 REFN <USER_REFERENCE_NUMBER>    {0:M}	/* A user-defined number or text that the submitter uses to identify this record. */
    +2 TYPE <USER_REFERENCE_TYPE>    {0:1}	/* A user-defined definition of the user_reference_number. */
  +1 RIN <AUTOMATED_RECORD_ID>    {0:1}	/* A unique record identification number assigned to the record by the source system. This number is intended to serve as a more sure means of identification of a record for reconciling differences in data between two interfacing systems. */
  +1 <<CHANGE_DATE>>    {0:1}	/* A CHANGE_DATE() object giving the time this record was last modified. If not provided, the current date is used. */
  +1 <<NOTE_STRUCTURE>>    {0:M}	/* A list of NOTE_STRUCTURE() objects. */
  +1 <<SOURCE_CITATION>>    {0:M}	/* A list of SOURCE_CITATION() objects. */
  +1 <<MULTIMEDIA_LINK>>    {0:M}	/* A list of MULTIMEDIA_LINK() objects. */


ASSOCIATION_STRUCTURE :=
n ASSO @<XREF:INDI>@    {1:1}	/* An xref ID of an individual record. */
  +1 RELA <RELATION_IS_DESCRIPTOR>    {1:1}	/* A word or phrase that states object 1's relation is object 2. */
  +1 <<SOURCE_CITATION>>    {0:M}	/* A list of SOURCE_CITATION() objects. */
  +1 <<NOTE_STRUCTURE>>    {0:M}	/* A list of NOTE_STRUCTURE() objects. */


PERSONAL_NAME_STRUCTURE :=
n NAME <NAME_PERSONAL>    {1:1}	/* The surname of an individual, if known, is enclosed between two slash (/) characters. The order of the name parts should be the order that the person would, by custom of their culture, have used when giving it to a recorder. */
  +1 TYPE <NAME_TYPE>    {0:1}	/* Indicates the name type, for example the name issued or assumed as an immigrant. For example: 'aka'/ALSO_KNOWN_AS (an unofficial pseudonym, also known as, alias, etc), 'birth'/BIRTH_NAME (name given on birth certificate), 'immigrant'/IMMIGRANT (name assumed at the time of immigration), 'maiden' (maiden name, name before first marriage), 'married'/MARRIAGE_NAME (name assumed at marriage), 'adoption'/ADOPTIVE_NAME, 'religious'/RELIGIOUS_NAME -- https://github.com/FamilySearch/gedcomx/blob/master/specifications/name-part-qualifiers-specification.md. */
  +1 <<PERSONAL_NAME_PIECES>>    {0:1}	/* A PERSONAL_NAME_PIECES() object giving the components of the name. */
  +1 FONE <NAME_PHONETIC_VARIATION>    {0:M}	/* A character vector of phonetic variations of the name. */
    +2 TYPE <PHONETIC_TYPE>    {1:1}	/* Indicates the method used in transforming the text to the phonetic variation (eg. 'hangul', 'kana'). */
    +2 <<PERSONAL_NAME_PIECES>>    {0:1}	/* A list of PERSONAL_NAME_PIECES() objects giving the components of the phonetic name variations. */
  +1 ROMN <NAME_ROMANIZED_VARIATION>    {0:M}	 /* A character vector giving romanized variations of the name. */
    +2 TYPE <ROMANIZED_TYPE>    {1:1}	 /* Indicates the method used in transforming the text to a romanized variation (eg. 'romaji', 'pinyin', 'wagegiles', ...). */
    +2 <<PERSONAL_NAME_PIECES>>    {0:1}	/* A list of PERSONAL_NAME_PIECES() objects giving the components of the romanized name variations. */


PERSONAL_NAME_PIECES :=
n NPFX <NAME_PIECE_PREFIX>    {0:1}	/* Non indexing name piece that appears preceding the given name and surname parts. Different name prefix parts are separated by a comma. */
n GIVN <NAME_PIECE_GIVEN>    {0:1}	/* Given name or earned name. Different given names are separated by a comma. */
n NICK <NAME_PIECE_NICKNAME>    {0:1}	/* A descriptive or familiar name used in connection with one's proper name. */
n SPFX <NAME_PIECE_SURNAME_PREFIX>    {0:1}	/* Surname prefix or article used in a family name. Different surname articles are separated by a comma, for example in the name "de la Cruz", this value would be "de, la". */
n SURN <NAME_PIECE_SURNAME>    {0:1}	/* Surname or family name. Different surnames are separated by a comma. */
n NSFX <NAME_PIECE_SUFFIX>    {0:1}	/* Non-indexing name piece that appears after the given name and surname parts. Different name suffix parts are separated by a comma. */
n <<NOTE_STRUCTURE>>    {0:M}	/* A list of NOTE_STRUCTURE() objects. */
n <<SOURCE_CITATION>>    {0:M}	/* A list of SOURCE_CITATION() objects. */
